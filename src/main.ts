import {
    ACTUAL_PROBLEM_SIZE,
    check_solution,
    get_current_best,
    get_evals,
    init_current_best,
    init_evals,
    NUM_OF_CUSTOMERS,
    print_solution,
    read_problem,
} from "./evrp";
//import { initialize_heuristic, run_heuristic } from "./heuristic";
import { get_best_sol, init_population, initialize_heuristic, run_heuristic } from "./genetic_heuristic";
import { close_stats, generate_solution_data, get_mean, MAX_TRIALS, open_stats } from "./stats";
import prand from "pure-rand";

let rng1: prand.RandomGenerator;

/*initialiazes a run for your heuristic*/
function start_run(r: number) {
    rng1 = prand.xoroshiro128plus(r);

    init_evals();
    init_current_best();
    console.log("Run:", r, "with random seed", r);
}

/*gets an observation of the run for your heuristic*/
function end_run(r: number) {
    get_mean(r - 1, get_current_best()); //from stats.h
    console.log(
        "End of run ",
        r,
        " with best solution quality ",
        get_current_best(),
        " total evaluations: ",
        get_evals()
    );
    console.log(" ");
}

/*sets the termination conidition for your heuristic*/
function termination_condition(): boolean {
    let flag: boolean;
    if (get_evals() >= 25000 * ACTUAL_PROBLEM_SIZE) flag = true;
    else flag = false;

    return flag;
}

/****************************************************************/
/*                Main Function                                 */
/****************************************************************/
function main(argc: number, argv: string[]) {
    let run: number;
    //console.log('argv',argv)
    /*Step 1*/
    //let problem_instance = 'E-n23-k3.evrp' //argv[1]; //pass the .evrp filename as an argument
    //let problem_instance = 'E-n51-k5.evrp' //argv[1]; //pass the .evrp filename as an argument
    let problem_instance = argv[argc - 1]; //pass the .evrp filename as an argument
    if (!problem_instance || problem_instance === "") {
        throw new Error("Instance not provided in the command");
    }
    read_problem(problem_instance); //Read EVRP from file from EVRP.h

    /*Step 2*/
    open_stats(problem_instance); //open text files to store the best values from the 20 runs stats.h

    for (run = 1; run <= MAX_TRIALS; run++) {
        /*Step 3*/
        start_run(run);
        //Initialize your heuristic here
        initialize_heuristic(rng1); //heuristic.h

        /*Step 4*/
        while (!termination_condition()) {
            //Execute your heuristic
            run_heuristic(); //heuristic.h
        }
        print_solution(get_best_sol().tour, get_best_sol().steps);
        check_solution(get_best_sol().tour, get_best_sol().steps);
        /*Note that the solution generated by the random heuristic may not 
        be feasisble in terms of energy when check_solution is utilized. 
        The implementation is only for your reference*/
        /*Step 5*/
        end_run(run); //store the best solution quality for each run
        // Debug solution progress over time
        //generate_solution_data(run);
    }
    /*Step 6*/
    close_stats(); //close text files to calculate the mean result from the 20 runs stats.h
}

main(process.argv.length, process.argv);
